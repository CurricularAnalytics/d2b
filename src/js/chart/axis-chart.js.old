/* Copyright Â© 2013-2015 Academic Dashboards, All Rights Reserved. */

/*axis chart*/
d2b.CHARTS.axisChart = function(){

	//private store
	var $$ = {};

	//user set width
	$$.width = d2b.CONSTANTS.DEFAULTWIDTH();
	//user set height
	$$.height = d2b.CONSTANTS.DEFAULTHEIGHT();
	//inner/outer height/width and margin are modified as sections of the chart are drawn
	$$.innerHeight = $$.height;
	$$.innerWidth = $$.width;
	$$.outerHeight = $$.height;
	$$.outerWidth = $$.width;
	$$.forcedMargin = d2b.CONSTANTS.DEFAULTFORCEDMARGIN();
	//force chart regeneration on next update()
	$$.generateRequired = true;
	//d3.selection for chart container
	$$.selection = d3.select('body');
	//default animation duration
	$$.animationDuration = d2b.CONSTANTS.ANIMATIONLENGTHS().normal;
	//color hash to be used
	$$.color = d2b.CONSTANTS.DEFAULTCOLOR();
	//carries current data set
	$$.currentChartData = {
		types:[],
		labels:{}
	};
	//formatting x values
	$$.xFormat = function(value){return d3.round(value, 2);};

	//formatting y values
	$$.yFormat = function(value){return d3.round(value, 2);};

	$$.events = d2b.UTILS.chartEvents();

	//legend OBJ
	$$.legend = new d2b.UTILS.LEGENDS.legend()
		.active(true)
		.color($$.color);
	//legend orientation 'top', 'bottom', 'left', or 'right'
	$$.legendOrientation = 'bottom';
	//legend data
	$$.legendData = {data:{items:[]}};
	//controls OBJ
	$$.controls = new d2b.UTILS.CONTROLS.controls();

	$$.rotate = false;

	//controls data
	$$.controlsData = {
				hideLegend: {
					label: "Hide Legend",
					type: "checkbox",
					visible: false,
					enabled: false
				},
				lockYAxis: {
					label: "Lock Y-Axis",
					type: "checkbox",
					visible: false,
					enabled: false,
					domain:[0,1]
				},
				lockXAxis: {
					label: "Lock X-Axis",
					type: "checkbox",
					visible: false,
					enabled: false,
					domain:[0,1]
				}
			};

	//account for any tools defined by the various axis chart types
	for(var type in d2b.UTILS.AXISCHART.TYPES){
		if(d2b.UTILS.AXISCHART.TYPES[type].tools){
			var tools = d2b.UTILS.AXISCHART.TYPES[type].tools();
			if(tools){
				//controlsData tools
				if(tools.controlsData){
					for(control in tools.controlsData){
						$$.controlsData[control] = tools.controlsData[control];
					}
				}
			}
		}
	}

	$$.tooltipLayout = 0;
	$$.tooltip = d2b.SVG.tooltip();

	$$.axis = d2b.SVG.axis();

	$$.initAxes = true;

	//persistent chart data is used to save data properties that need to persist through a data update
	$$.persistentChartData = {};

	$$.updateGraphProperties = function(){
		$$.selection.types.background.type.each(function(d){
			d2b.UTILS.applyProperties.call(this.d2bType, d.properties);

			this.d2bType
				.animationDuration($$.animationDuration)
				.x($$.axis.scale('x').reversed($$.rotate))
				.y($$.axis.scale('y').reversed($$.rotate))
				.width($$.innerWidth)
				.height($$.innerHeight)
				.color($$.color)
				.tooltipSVG($$.tooltip)
				.xFormat($$.xFormat)
				.yFormat($$.yFormat)
				.general(d.general)
				.foreground(d.foregroundGraphs)
				.background(d.backgroundGraphs)
				.data(d.graphs.filter(function(graph){return !$$.persistentChartData[graph.type][graph.key].hide;}))
		});
	};

	//update scale domains based on yValues/xValues 'getters' of each graph type
	$$.updateDomains = function(){

		var xValues = [], yValues = [];
		var xDomain, yDomain;
		var xScale = $$.axis.x().axis.scale(), yScale = $$.axis.y().axis.scale();

		$$.selection.types.background.type.each(function(d){
			if(this.d2bType.xValues)
				xValues = xValues.concat(this.d2bType.xValues());
			if(this.d2bType.yValues)
				yValues = yValues.concat(this.d2bType.yValues());
		});

		if($$.controlsData.lockXAxis.enabled){
			xScale.domain($$.controlsData.lockXAxis.domain);
		}else{
			xScale.domain(d2b.UTILS.domain(xValues, xScale));
		}

		if($$.controlsData.lockYAxis.enabled){
			yScale.domain($$.controlsData.lockYAxis.domain);
		}else{
			yScale.domain(d2b.UTILS.domain(yValues, yScale));
		}
	};

	//initialize axis-chart-type containers and graph containers
	$$.initGraphs = function(){

		//enter update exit general svg:g element for each axis-chart-type
		$$.selection.types.general.type = $$.selection.types.general
			.selectAll('g.d2b-axis-type-general')
				.data($$.currentChartData.types, function(d){return d.type;});
		$$.selection.types.general.type.enter()
			.append('g')
				.attr('class', function(d){return 'd2b-axis-type-general d2b-'+d.type;});
		$$.selection.types.general.type
				.each(function(d){d.general = d3.select(this)});
		$$.selection.types.general.type.exit()
			.transition()
				.duration($$.animationDuration)
				.style('opacity',0)
				.remove();

		//enter update exit a foreground svg:g element for each axis-chart-type
		$$.selection.types.foreground.type = $$.selection.types.foreground
			.selectAll('g.d2b-axis-type-foreground')
				.data($$.currentChartData.types, function(d){return d.type;});

		$$.selection.types.foreground.type.enter()
			.append('g')
				.attr('class', function(d){return 'd2b-axis-type-foreground d2b-'+d.type;});

		$$.selection.types.foreground.type.exit()
			.transition()
				.duration($$.animationDuration)
				.style('opacity',0)
				.remove();

		//enter update exit a sub-foreground element for the graphs associated with each type
		$$.selection.types.foreground.type.graph = $$.selection.types.foreground.type.selectAll('g.d2b-axis-chart-foreground-graph')
			.data(
				function(d){
					return d.graphs.filter(function(graph){return !$$.persistentChartData[graph.type][graph.key].hide;})
				},
				function(d,i){
					return d.key;
				}
			);

		$$.selection.types.foreground.type.graph.enter()
			.append('g')
				.style('opacity',0)
				.attr('class', 'd2b-axis-chart-foreground-graph');

		//save the foreground in data for use with the legend events
		$$.selection.types.foreground.type.graph
				.each(function(graph){
					$$.persistentChartData[graph.type][graph.key].foreground = d3.select(this);
				})
			.transition()
				.duration($$.animationDuration)
				.style('opacity',1);

		$$.selection.types.foreground.type.graph.exit()
			.each(function(d){$$.persistentChartData[d.type][d.key].foreground = null;})
			.transition()
				.duration($$.animationDuration)
				.style('opacity',0)
				.remove();

		//enter update exit a background svg:g element for each axis-chart-type
		$$.selection.types.background.type = $$.selection.types.background
			.selectAll('g.d2b-axis-type-background')
				.data($$.currentChartData.types, function(d){return d.type;});

		$$.selection.types.background.type.enter()
			.append('g')
				.attr('class', function(d){return 'd2b-axis-type-background d2b-'+d.type;})
				.each(function(d){
					var masterType = 'axis-chart-';
					this.d2bType = d2b.UTILS.AXISCHART.TYPES[d.type](d.type);
					this.d2bType
						.axisChart(chart)
						.controls($$.controlsData);

					$$.events.translateEvents(this.d2bType);
				});
		$$.selection.types.background.type.exit()
			.transition()
				.duration($$.animationDuration)
				.style('opacity',0)
				.remove();

		//enter update exit a sub-foreground element for the graphs associated with each type
		$$.selection.types.background.type.graph = $$.selection.types.background.type.selectAll('g.d2b-axis-chart-background-graph')
			.data(
				function(d){
					return d.graphs.filter(function(graph){return !$$.persistentChartData[graph.type][graph.key].hide;})
				},
				function(d,i){
					return d.key;
				}
			);
		$$.selection.types.background.type.graph.enter()
			.append('g')
				.attr('class', 'd2b-axis-chart-background-graph')
				.style('opacity',0);

		//save the background in data for use with the legend events
		$$.selection.types.background.type.graph
				.each(function(graph){
					$$.persistentChartData[graph.type][graph.key].background = d3.select(this);
				})
			.transition()
				.duration($$.animationDuration)
				.style('opacity',1);
		$$.selection.types.background.type.graph.exit()
			.each(function(d){$$.persistentChartData[d.type][d.key].background = null;})
			.transition()
				.duration($$.animationDuration)
				.style('opacity',0)
				.remove();

		//store the foreground/background graphs within the data
		$$.selection.types.foreground.type.each(function(d){
			d.foregroundGraphs = $$.selection.types.foreground.type.graph;
		});
		$$.selection.types.background.type.each(function(d){
			d.backgroundGraphs = $$.selection.types.background.type.graph;
		});

	};

	//update the graphs stored in the instance of each axis-chart-type-background
	$$.updateGraphs = function(){

		$$.selection.types.background.type.each(function(d){
			this.d2bType
				.update();
		});

		$$.selection.types.background.type.exit()
			.transition()
				.duration($$.animationDuration)
				.style('opacity',0)
				.remove();

	};

	$$.updateTooltip = function(){
		//force tooltip layout 0 for rotate or ordinal axes
		if($$.rotate || $$.axis.x().axis.scale().rangeBand || $$.axis.y().axis.scale().rangeBand){
			$$.tooltip
				.layout(0)
		}else{
			$$.tooltip
				.layout($$.tooltipLayout)
				.x($$.axis.scale('x'))
				.y($$.axis.scale('y'));
		}
	};

	$$.updateAxis = function(){
		//rotate axis orientations if $$.rotate asserted
		if($$.rotate){$$.rotateAxis();}

		$$.axis
			.width($$.innerWidth)
			.height($$.innerHeight);

		$$.selection.axes
			.transition()
				.duration($$.animationDuration)
				.call($$.axis);

		//revert axis orientations
		if($$.rotate){$$.rotateAxis();}

		var axisBox = $$.axis.box();

		$$.forcedMargin.left += axisBox.padding.left;
		$$.forcedMargin.right += axisBox.padding.right;

		$$.selection.types
			.transition()
				.duration($$.animationDuration)
				.attr('transform','translate('+axisBox.padding.left+','+axisBox.padding.top+')');

		$$.selection.types.tracker
			.transition()
				.duration($$.animationDuration)
				.attr('width', axisBox.innerWidth)
				.attr('height', axisBox.innerHeight);

		d2b.UTILS.CHARTS.HELPERS.updateDimensions($$);

		$$.updateTooltip();
	};

	$$.rotateAxis = function(){
		var orientationX = $$.axis.x().orientation;
		var orientationX2 = $$.axis.x2().orientation;
		var orientationY = $$.axis.y().orientation;
		var orientationY2 = $$.axis.y2().orientation;
		$$.axis.x({orientation: orientationY});
		$$.axis.y({orientation: orientationX});
		$$.axis.x2({orientation: orientationY2});
		$$.axis.y2({orientation: orientationX2});

		var getXDomain = $$.axis.x().axis.scale().domain;
		getXDomain(getXDomain().reverse());
	};

	$$.transformTypes = function(){
		if($$.rotate){
			$$.selection.types.background
				.transition()
					.duration($$.animationDuration)
					.attr('transform','translate('+($$.innerWidth)+', 0),rotate(90)');
			$$.selection.types.foreground
				.transition()
					.duration($$.animationDuration)
					.attr('transform','translate('+($$.innerWidth)+', 0),rotate(90)');
		}else{
			$$.selection.types.background
				.transition()
					.duration($$.animationDuration)
					.attr('transform','');
			$$.selection.types.foreground
				.transition()
					.duration($$.animationDuration)
					.attr('transform','');
		}
	};

	$$.setLegendData = function(){
		//set legend data and update legend viz
		if($$.controlsData.hideLegend.enabled){
			$$.legendData = {data:{items:[]}};
		}else{
			$$.legendData.data.items = [].concat.apply([],
				$$.currentChartData.types
					.map(
						function(type){
							return type.graphs
								.filter(
									function(graph){
										return !graph.notInLegend;

									}
								)
								.map(function(graph,i){
									graph.open = $$.persistentChartData[type.type][graph.key].hide;
									return graph;
								})
						}
					)
			);
		}
	};

	// reset hidden types/graphs
	$$.resetHidden = function(){
		$$.currentChartData.types.forEach(function(type){
			type.graphs.forEach(function(graph){
				$$.persistentChartData[graph.type][graph.key].hide = false;
			});
		});
	};

	$$.legendMouseover = function(t,d){
			var background = $$.persistentChartData[d.type][d.key].background;
			var foreground = $$.persistentChartData[d.type][d.key].foreground;

			if(background && foreground){
				var backgroundNode = background.node();
				var foregroundNode = foreground.node();
				//bring the type and the graph to the front for the foreground and background
				if(backgroundNode.parentNode){
					backgroundNode.parentNode.appendChild(backgroundNode);
					if(backgroundNode.parentNode.parentNode)
						backgroundNode.parentNode.parentNode.appendChild(backgroundNode.parentNode);
				}
				if(foregroundNode.parentNode){
					foregroundNode.parentNode.appendChild(foregroundNode);
					if(foregroundNode.parentNode.parentNode)
						foregroundNode.parentNode.parentNode.appendChild(foregroundNode.parentNode);
				}

				//dim all but the corresponding graph
				$$.selection.types.foreground.type.graph
					.transition()
						.duration($$.animationDuration/2)
						.style('opacity', 0.2);
				$$.selection.types.background.type.graph
					.transition()
						.duration($$.animationDuration/2)
						.style('opacity', 0.2);
				background
					.transition()
						.duration($$.animationDuration/2)
						.style('opacity', 1);
				foreground
					.transition()
						.duration($$.animationDuration/2)
						.style('opacity', 1);
			}
	};

	$$.legendMouseout = function(t,d){
		//reset dimming
		$$.selection.types.foreground.type.graph
			.transition()
				.duration($$.animationDuration/2)
				.style('opacity', 1);
		$$.selection.types.background.type.graph
			.transition()
				.duration($$.animationDuration/2)
				.style('opacity', 1);
	};

	$$.legendClick = function(t,d){
		$$.persistentChartData[d.type][d.key].hide = !$$.persistentChartData[d.type][d.key].hide;
		var allHidden = true;

		$$.currentChartData.types.forEach(function(type){
			type.graphs.forEach(function(graph){
				if(allHidden == true && !$$.persistentChartData[graph.type][graph.key].hide)
					allHidden = false;
			});
		});
		//if all types/graphs are hidden, show them all
		if(allHidden){
			$$.resetHidden();
		}
		chart.update();
	};

	$$.updateLabels = function(){
		$$.axis.x({labelOutside: $$.currentChartData.labels.x});
		$$.axis.y({labelOutside: $$.currentChartData.labels.y});
	};

	$$.legendDblClick = function(t,d){
		$$.currentChartData.types.forEach(function(type){
			type.graphs.forEach(function(graph){
				$$.persistentChartData[graph.type][graph.key].hide = graph.key != d.key;
			});
		});

		chart.update();
	};



	/*DEFINE CHART OBJECT AND CHART MEMBERS*/
	var chart = {};

	//chart setters
	chart.select = 							d2b.UTILS.CHARTS.MEMBERS.select(chart, $$, function(){ $$.generateRequired = true; });
	chart.selection = 					d2b.UTILS.CHARTS.MEMBERS.prop(chart, $$, 'selection', function(){ $$.generateRequired = true; });
	chart.width = 							d2b.UTILS.CHARTS.MEMBERS.prop(chart, $$, 'width');
	chart.height = 							d2b.UTILS.CHARTS.MEMBERS.prop(chart, $$, 'height');
	chart.tooltipLayout =				d2b.UTILS.CHARTS.MEMBERS.prop(chart, $$, 'tooltipLayout');
	chart.animationDuration = 	d2b.UTILS.CHARTS.MEMBERS.prop(chart, $$, 'animationDuration', function(){
		$$.legend.animationDuration($$.animationDuration);
		$$.controls.animationDuration($$.animationDuration);
		// if background d2b types have been created, update their animation duration as well
		if(d2b.UTILS.checkNested($$, 'selection', 'types', 'background', 'type')){
			$$.selection.types.background.type.each(function(d){
				this.d2bType.animationDuration($$.animationDuration);
			});
		}
	});
	chart.legendOrientation = 	d2b.UTILS.CHARTS.MEMBERS.prop(chart, $$, 'legendOrientation');
	chart.axis = 								d2b.UTILS.CHARTS.MEMBERS.prop(chart, $$, 'axis');
	chart.xFormat = 						d2b.UTILS.CHARTS.MEMBERS.format(chart, $$, 'xFormat');
	chart.yFormat = 						d2b.UTILS.CHARTS.MEMBERS.format(chart, $$, 'yFormat');
	// chart.xFormatAxis = 						d2b.UTILS.CHARTS.MEMBERS.format(chart, $$, 'xFormatAxis', function(){$$.xAlias.axis.tickFormat($$.xFormatAxis);});
	// chart.yFormatAxis = 						d2b.UTILS.CHARTS.MEMBERS.format(chart, $$, 'yFormatAxis', function(){$$.yAlias.axis.tickFormat($$.yFormatAxis);});
	chart.persistentData = 			d2b.UTILS.CHARTS.MEMBERS.prop(chart, $$, 'persistentChartData');
	chart.controls = 						d2b.UTILS.CHARTS.MEMBERS.controls(chart, $$);
	chart.on = 									d2b.UTILS.CHARTS.MEMBERS.events(chart, $$);
	chart.color = 							d2b.UTILS.CHARTS.MEMBERS.prop(chart, $$, 'color', function(){
		$$.legend.color($$.color)
	});

	// rotate the chart, set x,y scales accordingly
	chart.rotate = function(value){
		$$.rotate = value;
		return chart;
	};

	//data setter
	chart.data = function(chartData, reset){
		if(!arguments.length) return $$.currentChartData;
		if(reset){
			$$.currentChartData = {};
		}

		if(chartData.data.types){
			$$.currentChartData.types = chartData.data.types;

			//init persistent data links
			$$.currentChartData.types.forEach(function(type){
				if(!$$.persistentChartData[type.type])
					$$.persistentChartData[type.type] = {};
				type.graphs.forEach(function(graph){
					graph.key = graph.key || graph.label;
					if(!$$.persistentChartData[type.type][graph.key])
						$$.persistentChartData[type.type][graph.key] = {hide:false};
				});
			});

		}

		$$.currentChartData.labels = chartData.data.labels || $$.currentChartData.labels;

		return chart;
	};

	//chart generate
	chart.generate = function(callback) {
		$$.generateRequired = false;
		$$.initAxes = true;

		//empties $$.selection and appends ($$.selection.svg, $$.selection.group, $$.selection.legend, $$.selection.controls)
		d2b.UTILS.CHARTS.HELPERS.generateDefaultSVG($$);

		//init legend properties
		$$.legend
				.selection($$.selection.legend);

		//init control properties
		$$.controls
				.selection($$.selection.controls)
				.on('change.d2b-change',function(d,i){
					$$.controlsData[d.key].enabled = d.state;
					chart.update();
				});

		//init main chart container
		$$.selection.main = $$.selection.group
			.append('g')
				.attr('class','d2b-axis-chart');

		$$.selection.axes = $$.selection.main
			.append('g')
				.attr('class','d2b-axes');

		$$.selection.types = $$.selection.main
			.append('g')
				.attr('class','d2b-axis-types')
				.call($$.tooltip.tracker);
		$$.selection.types.tracker = $$.selection.types
			.append('rect')
				.style('fill-opacity', 0);
		$$.selection.types.background = $$.selection.types
			.append('g')
				.attr('class','d2b-axis-types-background');
		$$.selection.types.foreground = $$.selection.types
			.append('g')
				.attr('class','d2b-axis-types-foreground');
		$$.selection.types.general = $$.selection.types
			.append('g')
				.attr('class','d2b-axis-types-general');

		$$.selection.types.tooltip = $$.selection.types
			.append('g')
				.attr('class','d2b-axis-types-tooltip-area')
				.style('opacity',0)
				.call($$.tooltip.container);

		$$.legend
			.on('element-mouseover',$$.legendMouseover)
			.on('element-mouseout',$$.legendMouseout)
			.on('element-click',$$.legendClick)
			.on('element-dblclick',$$.legendDblClick);

		//auto update chart
		var temp = $$.animationDuration;
		chart
				.animationDuration(0)
				.update(callback)
				.animationDuration(temp);

		return chart;
	};

	//chart update
	chart.update = function(callback){

		//if generate required call the generate method
		if($$.generateRequired){
			return chart.generate(callback);
		}

		//init forcedMargin
		$$.forcedMargin = d2b.CONSTANTS.DEFAULTFORCEDMARGIN();
		$$.outerWidth = $$.width;
		$$.outerHeight = $$.height;

		//init svg dimensions
		$$.selection.svg.attr('width',$$.width).attr('height',$$.height);

		//update dimensions to the conform to the padded SVG:G
		d2b.UTILS.CHARTS.HELPERS.updateDimensions($$);

		//update controls viz
		d2b.UTILS.CHARTS.HELPERS.updateControls($$);

		//save the type of each graph
		$$.currentChartData.types.forEach(function(type){
			type.graphs.forEach(function(graph){
				graph.type = type.type;
			});
		});

		$$.setLegendData();
		d2b.UTILS.CHARTS.HELPERS.updateLegend($$);

		if(($$.legend.computedHeight() && ($$.legendOrientation == 'left'||$$.legendOrientation == 'right'))){
			$$.forcedMargin[$$.legendOrientation] += 10;
		}

		$$.selection.main
			.transition()
				.duration($$.animationDuration)
				.attr('transform', 'translate('+$$.forcedMargin.left+','+$$.forcedMargin.top+')')

		d2b.UTILS.CHARTS.HELPERS.updateDimensions($$);

		//reset Tooltip
		$$.tooltip.reset();

		$$.updateLabels();
		$$.initGraphs();
		$$.updateGraphProperties();
		$$.updateDomains();
		$$.updateAxis();
		$$.transformTypes();
		$$.updateGraphs();

		$$.tooltip.start();

		d3.timer.flush();

		$$.events.dispatch("update", $$.selection);

		if(callback)
			callback();

		return chart;
	};

	return chart;
};
